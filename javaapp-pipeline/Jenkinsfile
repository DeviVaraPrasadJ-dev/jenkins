pipeline {
    agent {label 'agent'}

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/DeviVaraPrasadJ-dev/jenkins.git'
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        dir('javaapp-pipeline') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('Trivy Scan') {
                    steps {
                        dir('javaapp-pipeline') {
                            sh '''
                                wget -q https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -O html.tpl
                                trivy fs --format template --template "@html.tpl" -o report.html .
                            '''
                        }
                    }
                }
            }
        }

        // stage('Sonar Analysis') {
        //     steps {
        //         dir('javaapp-pipeline') {
        //             withSonarQubeEnv('sonar') {
        //                 sh '''
        //                     mvn clean verify sonar:sonar \
        //                     -Dsonar.projectKey=java-app \
        //                     -Dsonar.projectName=java-app 
        //                 '''
        //             }
        //         }
        //     }
        // }

        stage('Build') {
            steps {
                dir('javaapp-pipeline') {
                    sh 'mvn clean package'
                }
            }
        }

         stage('Publish') {
              agent { label 'agent2' } 
              steps {
                script {
                  dir('javaapp-tomcat/target') {
                    sh 'echo "Files in target:" && ls -lh'
        
                    rtUpload(
                      serverId: 'jfrog',
                      spec: '''{
                        "files": [
                          {
                            "pattern": "artisantek-app.war",
                            "target": "maven/com/artisantek/java-tomcat-21/1.0.1/"
                          }
                        ]
                      }'''
                    )
                  }
                }
              }
            }

        stage('Deploy') {
            steps {
                dir('javaapp-pipeline/target') {
                    sh '''
                        if pgrep -f "java -jar java-sample-21-1.0.0.jar" > /dev/null; then
                            pkill -f "java -jar java-sample-21-1.0.0.jar"
                            echo "App was running and has been killed."
                        else
                            echo "App is not running."
                        fi
                        JENKINS_NODE_COOKIE=dontKillMe nohup java -jar java-sample-21-1.0.0.jar > app.log 2>&1 &
                    '''
                }
            }
        }

    }
    
    post {
    success {
      withCredentials([string(credentialsId: 'DISCORD_WEBHOOK', variable: 'DISCORD_URL')]) {
        sh '''
          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{"content": "*Build Success!* Job: '${JOB_NAME}' #${BUILD_NUMBER}"}' \
          $DISCORD_URL
        '''
      }
    }
    failure {
      withCredentials([string(credentialsId: 'DISCORD_WEBHOOK', variable: 'DISCORD_URL')]) {
        sh '''
          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{"content": "*Build Failed!* Job: '${JOB_NAME}' #${BUILD_NUMBER}"}' \
          $DISCORD_URL
        '''
      }
    }

    }
}
